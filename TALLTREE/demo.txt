#include <bits/stdc++.h>
#define FORE(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define oo 20000000000000
#define FASTIO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define FOR(i,a,b) for(int i = a; i <= b; i++)
#define FOD(i,a,b) for(int i = b; i >= a; i--)
#define REP(i,a) for(int i = 0; i < a; i++)
#define MASK(i) (1LL << (i))
#define BIT(i, a) (((a) >> (i)) & 1)
#define fi first
#define se second
#define MOD 998244353
#define SUM(x, y) ((x) + (y) >= MOD ? (x) + (y) - MOD : (x) + (y))

using namespace std;

template<class T> T Abs(const T &x) { return (x < 0 ? -x : x); }
template<class X, class Y>
bool minimize(X &x, const Y &y) {
    X eps = 1e-9;
    if (x > y + eps) {
        x = y;
        return true;
    } else return false;
}
template<class X, class Y>
bool maximize(X &x, const Y &y) {
    X eps = 1e-9;
    if (x + eps < y) {
        x = y;
        return true;
    } else return false;
}

template <typename T>
inline void Read(T& x) {
    bool Neg = false;
    char c;
    for (c = getchar(); c < '0' || c > '9'; c = getchar())
        if (c == '-') Neg = !Neg;
    x = c - '0';
    for (c = getchar(); c >= '0' && c <= '9'; c = getchar())
        x = x * 10 + c - '0';
    if (Neg) x = -x;
}
template <typename T>
inline void Write(T x) {
    if (x < 0) { putchar('-'); x = -x; }
    T p = 1;
    for (T temp = x / 10; temp > 0; temp /= 10) p *= 10;
    for (; p > 0; x %= p, p /= 10) putchar(x / p + '0');
}
///        This's my code, read it carefully  ///
using ii = pair <int, int>;
using ll = long long;
using ld = long double;
const int Nmax = 500500;

struct SegmentTree{
    vector <int> lazy, tree, sum;
    int n;
    void build(const vector <int> &sumb, int i, int l, int r){
        if(l > r) return;
        if(l == r) {
            sum[i] = sumb[l];
            sum[i] %= MOD;
            return;
        }
        int m = (l + r) >> 1;
        build(sumb, 2 * i, l, m);
        build(sumb, 2 * i + 1, m + 1, r);
        sum[i] = SUM(sum[2 * i], sum[2 * i + 1]);
    }
    void pushDown(int i){
        FOR(j, 2 * i, 2 * i + 1){
            lazy[j] += (lazy[i] % MOD + MOD) % MOD;
            lazy[j] %= MOD;
            tree[j] += (1LL * lazy[i] * sum[j] % MOD);
            tree[j] %= MOD;
        }
        lazy[i] = 0;
    }
    void update(int i, int l, int r, int u, int v, int c){
        if(l > r || l > v || u > r || u > v) return;
        if(u <= l && r <= v){
            tree[i] = (tree[i] + (1LL * c * sum[i]) % MOD + MOD) % MOD;
            lazy[i] = ((lazy[i] + c) % MOD + MOD) % MOD;
            return;
        }
        pushDown(i);
        int m = (l + r) >> 1;
        update(2 * i, l, m, u, v, c);
        update(2 * i + 1, m + 1, r, u, v, c);
        tree[i] = SUM(tree[2 * i], tree[2 * i + 1]);
    }

    int getSum(int i, int l, int r, int u, int v){
        if(l > v || l > r || u > v || u > r) return 0;
        if(u <= l && r <= v) return (tree[i] % MOD + MOD) % MOD;

        pushDown(i);

        int m = (l + r) >> 1;
        int L = (getSum(2 * i, l, m, u, v) % MOD + MOD) % MOD;
        int R = (getSum(2 * i + 1, m + 1, r, u, v) % MOD + MOD) % MOD;
        return SUM(L , R);
    }

    SegmentTree(int n = 0, const vector <int> &sumb = vector <int>()){
        if(n > 0){
            REP(i,30) if(MASK(i) >= n){
                tree.assign(MASK(i + 1) + 2, 0);
                lazy.assign(MASK(i + 1) + 2, 0);
                sum.assign(MASK(i + 1) + 2, 0);
                build(sumb, 1, 1, n);
                return;
            }
        }
    }
};
SegmentTree it, mul;
int n, high[Nmax], start[Nmax], finish[Nmax], cnt = 0;
vector <int> a[Nmax];
void dfs(int u){
    start[u] = ++cnt;
    for(auto v : a[u]){
        high[v] = high[u] + 1;
        dfs(v);
    }
    finish[u] = cnt;
}
void readfile(){
    FASTIO
    freopen("TALLTREE.INP", "r", stdin);
    freopen("TALLTREE.OUT", "w", stdout);
    int subtask; cin >> subtask;
    cin >> n;
    FOR(i,2,n){
        int x; cin >> x;
        if(x != i) a[x].push_back(i);
    }
    dfs(1);
    vector <int> realHigh(n + 1);
    FOR(i,1,n) realHigh[start[i]] = high[i] % MOD;
    //FOR(i,1,n) cout << high[i] << " ";
    //cout << '\n';
    mul = SegmentTree(n, realHigh);

    FORE(i, realHigh) *i = 1;

    it = SegmentTree(n, realHigh);
    int q; cin >> q;
    while(q--){
        string sta; cin >> sta;
        int u; cin >> u;
        if(sta == "add"){
            int k; long long l; cin >> k >> l;
            k = (k % MOD + MOD) % MOD;
            if(k >= MOD) k -= MOD;
            l = (l % MOD + MOD) % MOD;
            if(l >= MOD) l -= MOD;
            it.update(1, 1, n, start[u], finish[u], (k + 1LL * high[u] * l % MOD) % MOD);
            mul.update(1, 1, n, start[u], finish[u], l == 0 ? l : MOD - l);
            continue;
        }
        if(sta == "get"){
            int a = it.getSum(1, 1, n, start[u], start[u]) % MOD;
            int b = mul.getSum(1, 1, n, start[u], start[u]) % MOD;
            cout << (a+b) % MOD << " ";
            continue;
        }
        int a = it.getSum(1, 1, n, start[u], finish[u]) % MOD;
        int b = mul.getSum(1, 1, n, start[u], finish[u]) % MOD;
        cout << (a + b) % MOD << " ";
    }
}
int32_t main(){
    readfile();
    return 0;
}
